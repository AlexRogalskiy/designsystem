{"version":3,"file":"component---src-pages-komponenter-lister-md-9e38837bb418e291c9d4.js","mappings":"uNAUsBA,E,6DAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,qCACA,sTACA,iCACA,mQACA,QAACT,EAAD,CAAWF,KAAK,mBAAmBW,QAAQ,eAC3C,gCACA,uUACA,QAACT,EAAD,CAAWF,KAAK,kBAAkBW,QAAQ,eAC1C,yIACA,QAACT,EAAD,CAAWF,KAAK,0BAA0BW,QAAQ,eAClD,sCACA,4OACqB,gBAAMC,WAAW,IAClC,UAAa,iBADI,uBADrB,QAG2C,gBAAMA,WAAW,IACxD,UAAa,iBAD0B,8BAH3C,iEAMA,QAACV,EAAD,CAAWF,KAAK,wBAAwBW,QAAQ,eAChD,iCACA,gEACA,QAACT,EAAD,CAAWF,KAAK,mCAAmCW,QAAQ,eAC3D,sCACA,QAACT,EAAD,CAAWF,KAAK,oCAAoCW,QAAQ,eAC5D,8CACA,+CAAiC,gBAAMC,WAAW,IAC9C,UAAa,iBADgB,2BAAjC,uCAGA,QAACV,EAAD,CAAWF,KAAK,gCAAgCW,QAAQ,eACxD,mCACA,wOAA0N,gBAAMC,WAAW,IACvO,UAAa,iBADyM,oBAA1N,0DAGA,QAACV,EAAD,CAAWF,KAAK,qBAAqBW,QAAQ,eAC7C,2CACA,8CAAgC,gBAAMC,WAAW,IAC7C,UAAa,iBADe,gBAAhC,aAEyC,gBAAMA,WAAW,IACtD,UAAa,iBADwB,4BAFzC,+BAKA,QAACV,EAAD,CAAWF,KAAK,6BAA6BW,QAAQ,eAKzDF,EAAWI,gBAAiB","sources":["webpack://@sb1/designsystem-cms/./src/pages/komponenter/lister.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/designsystem-docs/designsystem-docs/src/templates/MDXPage.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst DSExample = makeShortcode(\"DSExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Bruk av lister`}</h2>\n    <p>{`Lister brukes til å gruppere og organisere informasjon sånn at de er lettere å lese. Lister kan også hjelpe med å fremheve innhold som ellers kunne blitt borte i en lenger tekst. Trenger du en overskrift til listen, så husk å bruke riktig semantiske heading-tag, men med «ffe-h4»-klassen.`}</p>\n    <h2>{`BulletList`}</h2>\n    <p>{`BulletList er en unummert liste, og kan brukes i situasjoner der du ønsker å vise frem informasjon i en liste. For å bruke denne komponenten riktig må du også ta i bruk «BulletListItem»-komponenten, som representerer ett punkt i listen. `}</p>\n    <DSExample name=\"lists_BulletList\" mdxType=\"DSExample\" />\n    <h2>{`CheckList`}</h2>\n    <p>{`CheckList er også en unummert liste som brukes i tilfeller der man ønsker å vise f.eks hva som er inkludert i en tjeneste og ikke. For å få riktig ikon og formatering, kan du bruke CheckListItem-komponenten til hvert punkt på listen. Ønsker du ett X isteden trenger du bare å legge inn «isCross» som prop.`}</p>\n    <DSExample name=\"lists_CheckList\" mdxType=\"DSExample\" />\n    <p>{`Det er også mulig å spre innholdet ut over 2 kolonner der det er plass til det, ved å sende med en «columns» prop. `}</p>\n    <DSExample name=\"lists_CheckList_columns\" mdxType=\"DSExample\" />\n    <h2>{`DescriptionList`}</h2>\n    <p>{`DescriptionList er en liste der du kan sette et «begrep» og en beskrivelse. Et eksempel er oppramsing av personalia, der man har gatenavn som begrep og den faktiske adressen som beskrivelse.\nBestår av komponentene `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`DescriptionListTerm`}</code>{` og `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`DescriptionListDescription`}</code>{`, som brukes til å få riktig semantisk oppbygging av listen.`}</p>\n    <DSExample name=\"lists_DescriptionList\" mdxType=\"DSExample\" />\n    <h3>{`Horizontal`}</h3>\n    <p>{`Viser «begrep» og beskrivelse på en linje.`}</p>\n    <DSExample name=\"lists_DescriptionList_horizontal\" mdxType=\"DSExample\" />\n    <h3>{`Medium og large`}</h3>\n    <DSExample name=\"lists_DescriptionList_mediumlarge\" mdxType=\"DSExample\" />\n    <h3>{`DescriptionListMultiCol`}</h3>\n    <p>{`Det er også mulig å bruke `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`DescriptionListMultiCol`}</code>{` for vise listen over to kolonner.`}</p>\n    <DSExample name=\"lists_DescriptionListMultiCol\" mdxType=\"DSExample\" />\n    <h2>{`NumberedList`}</h2>\n    <p>{`Nummererte lister brukes i tilfeller der du vil informere om ting der rekkefølgen er viktig. Et eksempel er en registreringsflyt, eller bare instruksjoner der det er viktig å gjøre ting i en bestemt rekkefølge. `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`NumberedListItem`}</code>{` er komponenten som brukes til selve listeelementene.`}</p>\n    <DSExample name=\"lists_NumberedList\" mdxType=\"DSExample\" />\n    <h2>{`StylizedNumberedList`}</h2>\n    <p>{`En mer stylet versjon av `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`NumberedList`}</code>{`. Bruker `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`StylizedNumberedListItem`}</code>{` på selve listeelementene.`}</p>\n    <DSExample name=\"lists_StylizedNumberedList\" mdxType=\"DSExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","DSExample","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}