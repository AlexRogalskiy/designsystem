{"version":3,"file":"component---src-pages-komponenter-collapse-md-56a762eb0fb0163d0c66.js","mappings":"sNAUsBA,E,6DAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,uCACA,uEACA,2FAA6E,gBAAMC,WAAW,IAC1F,UAAa,iBAD4D,UAA7E,gJAKF,gBAAMA,WAAW,IACX,UAAa,iBADnB,4BALE,6DAQO,gBAAMA,WAAW,IACpB,UAAa,iBADV,aARP,0CAUmE,gBAAMA,WAAW,IAChF,UAAa,iBADkD,SAVnE,MAaA,2CACA,kGAAoF,gBAAMA,WAAW,IACjG,UAAa,iBADmE,UAApF,MAGA,QAACV,EAAD,CAAWF,KAAK,oBAAoBW,QAAQ,eAC5C,sDAAwC,gBAAMC,WAAW,IACrD,UAAa,iBADuB,UAAxC,4CAGA,QAACV,EAAD,CAAWF,KAAK,2BAA2BW,QAAQ,eAKvDF,EAAWI,gBAAiB","sources":["webpack://@sb1/designsystem-cms/./src/pages/komponenter/collapse.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/designsystem-docs/designsystem-docs/src/templates/MDXPage.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst DSExample = makeShortcode(\"DSExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Bruk av Collapse`}</h2>\n    <p>{`Komponent for å enkelt lage ekspanderbart område.`}</p>\n    <p>{`Merk at komponenten er avhengig av å få angitt transition styling for `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`height`}</code>{`.\nDette gjøres helst ved å importere less-filen fra pakkens less-mappe.\nAlternativt kan man gjøre det ved å selv legge styling i klassen\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`.ffe-collapse-transition`}</code>{`, legge det på en egen klasse og sende inn via\nproperty `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`className`}</code>{` eller style det direkte via property `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`style`}</code>{`.`}</p>\n    <h3>{`Collapse-komponenten`}</h3>\n    <p>{`Hvorvidt området er ekspandert eller ikke styres av konsumenten via property `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`isOpen`}</code>{`.`}</p>\n    <DSExample name=\"collapse_Collapse\" mdxType=\"DSExample\" />\n    <p>{`Et callback kan gis via property `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`onRest`}</code>{` som kjøres når transisjonen er ferdig.`}</p>\n    <DSExample name=\"collapse_Collapse_onRest\" mdxType=\"DSExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","DSExample","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}